function showOrHide(){document.getElementsByClassName("search__form-more")[0].innerHTML=details?'<div class="hidden">Больше деталей</div><div class="hide flex"><hr><a class="hide_text flex">Скрыть<i class="fa fa-angle-up bold" aria-hidden="true"></i></a><hr></div>':'<div class="show-more flex"><hr><a class="show-more_text">Расширеный поиск<i class="fa fa-angle-down bold" aria-hidden="true"></i></a><hr></div>'}!function(t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():window.noUiSlider=t()}(function(){"use strict";function t(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}function e(t){t.parentElement.removeChild(t)}function n(t){t.preventDefault()}function r(t){return t.filter(function(t){return!this[t]&&(this[t]=!0)},{})}function i(t,e){return Math.round(t/e)*e}function o(t,e){var n=t.getBoundingClientRect(),r=t.ownerDocument,i=r.documentElement,o=h(r);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(o.x=0),e?n.top+o.y-i.clientTop:n.left+o.x-i.clientLeft}function s(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function a(t,e,n){n>0&&(f(t,e),setTimeout(function(){p(t,e)},n))}function l(t){return Math.max(Math.min(t,100),0)}function u(t){return Array.isArray(t)?t:[t]}function c(t){t=String(t);var e=t.split(".");return e.length>1?e[1].length:0}function f(t,e){t.classList?t.classList.add(e):t.className+=" "+e}function p(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}function d(t,e){return t.classList?t.classList.contains(e):new RegExp("\\b"+e+"\\b").test(t.className)}function h(t){var e=void 0!==window.pageXOffset,n="CSS1Compat"===(t.compatMode||"");return{x:e?window.pageXOffset:n?t.documentElement.scrollLeft:t.body.scrollLeft,y:e?window.pageYOffset:n?t.documentElement.scrollTop:t.body.scrollTop}}function m(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function g(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,e)}catch(t){}return t}function v(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function b(t,e){return 100/(e-t)}function w(t,e){return 100*e/(t[1]-t[0])}function x(t,e){return w(t,t[0]<0?e+Math.abs(t[0]):e-t[0])}function S(t,e){return e*(t[1]-t[0])/100+t[0]}function y(t,e){for(var n=1;t>=e[n];)n+=1;return n}function E(t,e,n){if(n>=t.slice(-1)[0])return 100;var r,i,o,s,a=y(n,t);return r=t[a-1],i=t[a],o=e[a-1],s=e[a],o+x([r,i],n)/b(o,s)}function C(t,e,n){if(n>=100)return t.slice(-1)[0];var r,i,o,s,a=y(n,e);return r=t[a-1],i=t[a],o=e[a-1],s=e[a],S([r,i],(n-o)*b(o,s))}function N(t,e,n,r){if(100===r)return r;var o,s,a=y(r,t);return n?(o=t[a-1],s=t[a],r-o>(s-o)/2?s:o):e[a-1]?t[a-1]+i(r-t[a-1],e[a-1]):r}function U(t,e,n){var r;if("number"==typeof e&&(e=[e]),"[object Array]"!==Object.prototype.toString.call(e))throw new Error("noUiSlider ("+Q+"): 'range' contains invalid value.");if(r="min"===t?0:"max"===t?100:parseFloat(t),!s(r)||!s(e[0]))throw new Error("noUiSlider ("+Q+"): 'range' value isn't numeric.");n.xPct.push(r),n.xVal.push(e[0]),r?n.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(n.xSteps[0]=e[1]),n.xHighestCompleteStep.push(0)}function A(t,e,n){if(!e)return!0;n.xSteps[t]=w([n.xVal[t],n.xVal[t+1]],e)/b(n.xPct[t],n.xPct[t+1]);var r=(n.xVal[t+1]-n.xVal[t])/n.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=n.xVal[t]+n.xNumSteps[t]*i;n.xHighestCompleteStep[t]=o}function k(t,e,n){this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=e;var r,i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort(function(t,e){return t[0][0]-e[0][0]}):i.sort(function(t,e){return t[0]-e[0]}),r=0;r<i.length;r++)U(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)A(r,this.xNumSteps[r],this)}function P(e){if(t(e))return!0;throw new Error("noUiSlider ("+Q+"): 'format' requires 'to' and 'from' methods.")}function M(t,e){if(!s(e))throw new Error("noUiSlider ("+Q+"): 'step' is not numeric.");t.singleStep=e}function O(t,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider ("+Q+"): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider ("+Q+"): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider ("+Q+"): 'range' 'min' and 'max' cannot be equal.");t.spectrum=new k(e,t.snap,t.singleStep)}function V(t,e){if(e=u(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider ("+Q+"): 'start' option is incorrect.");t.handles=e.length,t.start=e}function F(t,e){if(t.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+Q+"): 'snap' option must be a boolean.")}function L(t,e){if(t.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+Q+"): 'animate' option must be a boolean.")}function D(t,e){if(t.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider ("+Q+"): 'animationDuration' option must be a number.")}function z(t,e){var n,r=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(n=1;n<t.handles;n++)r.push(e);r.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==t.handles+1)throw new Error("noUiSlider ("+Q+"): 'connect' option doesn't match handle count.");r=e}t.connect=r}function $(t,e){switch(e){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider ("+Q+"): 'orientation' option is invalid.")}}function H(t,e){if(!s(e))throw new Error("noUiSlider ("+Q+"): 'margin' option must be numeric.");if(0!==e&&(t.margin=t.spectrum.getMargin(e),!t.margin))throw new Error("noUiSlider ("+Q+"): 'margin' option is only supported on linear sliders.")}function j(t,e){if(!s(e))throw new Error("noUiSlider ("+Q+"): 'limit' option must be numeric.");if(t.limit=t.spectrum.getMargin(e),!t.limit||t.handles<2)throw new Error("noUiSlider ("+Q+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function q(t,e){if(!s(e))throw new Error("noUiSlider ("+Q+"): 'padding' option must be numeric.");if(0!==e){if(t.padding=t.spectrum.getMargin(e),!t.padding)throw new Error("noUiSlider ("+Q+"): 'padding' option is only supported on linear sliders.");if(t.padding<0)throw new Error("noUiSlider ("+Q+"): 'padding' option must be a positive number.");if(t.padding>=50)throw new Error("noUiSlider ("+Q+"): 'padding' option must be less than half the range.")}}function T(t,e){switch(e){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider ("+Q+"): 'direction' option was not recognized.")}}function B(t,e){if("string"!=typeof e)throw new Error("noUiSlider ("+Q+"): 'behaviour' must be a string containing options.");var n=e.indexOf("tap")>=0,r=e.indexOf("drag")>=0,i=e.indexOf("fixed")>=0,o=e.indexOf("snap")>=0,s=e.indexOf("hover")>=0;if(i){if(2!==t.handles)throw new Error("noUiSlider ("+Q+"): 'fixed' behaviour must be used with 2 handles");H(t,t.start[1]-t.start[0])}t.events={tap:n||o,drag:r,fixed:i,snap:o,hover:s}}function R(t,e){if(!1!==e)if(!0===e){t.tooltips=[];for(var n=0;n<t.handles;n++)t.tooltips.push(!0)}else{if(t.tooltips=u(e),t.tooltips.length!==t.handles)throw new Error("noUiSlider ("+Q+"): must pass a formatter for all handles.");t.tooltips.forEach(function(t){if("boolean"!=typeof t&&("object"!=typeof t||"function"!=typeof t.to))throw new Error("noUiSlider ("+Q+"): 'tooltips' must be passed a formatter or 'false'.")})}}function _(t,e){t.ariaFormat=e,P(e)}function I(t,e){t.format=e,P(e)}function X(t,e){if(void 0!==e&&"string"!=typeof e&&!1!==e)throw new Error("noUiSlider ("+Q+"): 'cssPrefix' must be a string or `false`.");t.cssPrefix=e}function Y(t,e){if(void 0!==e&&"object"!=typeof e)throw new Error("noUiSlider ("+Q+"): 'cssClasses' must be an object.");if("string"==typeof t.cssPrefix){t.cssClasses={};for(var n in e)e.hasOwnProperty(n)&&(t.cssClasses[n]=t.cssPrefix+e[n])}else t.cssClasses=e}function W(t,e){if(!0!==e&&!1!==e)throw new Error("noUiSlider ("+Q+"): 'useRequestAnimationFrame' option should be true (default) or false.");t.useRequestAnimationFrame=e}function G(t){var e={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:Z,format:Z},n={step:{r:!1,t:M},start:{r:!0,t:V},connect:{r:!0,t:z},direction:{r:!0,t:T},snap:{r:!1,t:F},animate:{r:!1,t:L},animationDuration:{r:!1,t:D},range:{r:!0,t:O},orientation:{r:!1,t:$},margin:{r:!1,t:H},limit:{r:!1,t:j},padding:{r:!1,t:q},behaviour:{r:!0,t:B},ariaFormat:{r:!1,t:_},format:{r:!1,t:I},tooltips:{r:!1,t:R},cssPrefix:{r:!1,t:X},cssClasses:{r:!1,t:Y},useRequestAnimationFrame:{r:!1,t:W}},r={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},useRequestAnimationFrame:!0};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(n).forEach(function(i){if(void 0===t[i]&&void 0===r[i]){if(n[i].r)throw new Error("noUiSlider ("+Q+"): '"+i+"' is required.");return!0}n[i].t(e,void 0===t[i]?r[i]:t[i])}),e.pips=t.pips;var i=[["left","top"],["right","bottom"]];return e.style=i[e.dir][e.ort],e.styleOposite=i[e.dir?0:1][e.ort],e}function J(t,i,s){function c(t,e){var n=bt.createElement("div");return e&&f(n,e),t.appendChild(n),n}function b(t,e){var n=c(t,i.cssClasses.origin),r=c(n,i.cssClasses.handle);return r.setAttribute("data-handle",e),r.setAttribute("tabindex","0"),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===e?f(r,i.cssClasses.handleLower):e===i.handles-1&&f(r,i.cssClasses.handleUpper),n}function w(t,e){return!!e&&c(t,i.cssClasses.connect)}function x(t,e){return!!i.tooltips[e]&&c(t.firstChild,i.cssClasses.tooltip)}function S(t,e,n){if("range"===t||"steps"===t)return ht.xVal;if("count"===t){if(!e)throw new Error("noUiSlider ("+Q+"): 'values' required for mode 'count'.");var r,i=100/(e-1),o=0;for(e=[];(r=o++*i)<=100;)e.push(r);t="positions"}return"positions"===t?e.map(function(t){return ht.fromStepping(n?ht.getStep(t):t)}):"values"===t?n?e.map(function(t){return ht.fromStepping(ht.getStep(ht.toStepping(t)))}):e:void 0}function y(t,e,n){function i(t,e){return(t+e).toFixed(7)/1}var o={},s=ht.xVal[0],a=ht.xVal[ht.xVal.length-1],l=!1,u=!1,c=0;return n=r(n.slice().sort(function(t,e){return t-e})),n[0]!==s&&(n.unshift(s),l=!0),n[n.length-1]!==a&&(n.push(a),u=!0),n.forEach(function(r,s){var a,f,p,d,h,m,g,v,b,w,x=r,S=n[s+1];if("steps"===e&&(a=ht.xNumSteps[s]),a||(a=S-x),!1!==x&&void 0!==S)for(a=Math.max(a,1e-7),f=x;f<=S;f=i(f,a)){for(d=ht.toStepping(f),h=d-c,v=h/t,b=Math.round(v),w=h/b,p=1;p<=b;p+=1)m=c+p*w,o[m.toFixed(5)]=["x",0];g=n.indexOf(f)>-1?1:"steps"===e?2:0,!s&&l&&(g=0),f===S&&u||(o[d.toFixed(5)]=[f,g]),c=d}}),o}function E(t,e,n){function r(t,e){var n=e===i.cssClasses.value,r=n?u:p,o=n?a:l;return e+" "+r[i.ort]+" "+o[t]}function o(t,o){o[1]=o[1]&&e?e(o[0],o[1]):o[1];var a=c(s,!1);a.className=r(o[1],i.cssClasses.marker),a.style[i.style]=t+"%",o[1]&&(a=c(s,!1),a.className=r(o[1],i.cssClasses.value),a.style[i.style]=t+"%",a.innerText=n.to(o[0]))}var s=bt.createElement("div"),a=[i.cssClasses.valueNormal,i.cssClasses.valueLarge,i.cssClasses.valueSub],l=[i.cssClasses.markerNormal,i.cssClasses.markerLarge,i.cssClasses.markerSub],u=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],p=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];return f(s,i.cssClasses.pips),f(s,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach(function(e){o(e,t[e])}),s}function C(){st&&(e(st),st=null)}function N(t){C();var e=t.mode,n=t.density||1,r=t.filter||!1,i=t.values||!1,o=t.stepped||!1,s=S(e,i,o),a=y(n,e,s),l=t.format||{to:Math.round};return st=ct.appendChild(E(a,r,l))}function U(){var t=nt.getBoundingClientRect(),e="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||nt[e]:t.height||nt[e]}function A(t,e,n,r){var o=function(e){return!ct.hasAttribute("disabled")&&(!d(ct,i.cssClasses.tap)&&(!!(e=k(e,r.pageOffset))&&(!(t===at.start&&void 0!==e.buttons&&e.buttons>1)&&((!r.hover||!e.buttons)&&(ut||e.preventDefault(),e.calcPoint=e.points[i.ort],void n(e,r))))))},s=[];return t.split(" ").forEach(function(t){e.addEventListener(t,o,!!ut&&{passive:!0}),s.push([t,o])}),s}function k(t,e){var n,r,i=0===t.type.indexOf("touch"),o=0===t.type.indexOf("mouse"),s=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(s=!0),i){if(t.touches.length>1)return!1;n=t.changedTouches[0].pageX,r=t.changedTouches[0].pageY}return e=e||h(bt),(o||s)&&(n=t.clientX+e.x,r=t.clientY+e.y),t.pageOffset=e,t.points=[n,r],t.cursor=o||s,t}function P(t){var e=t-o(nt,i.ort),n=100*e/U();return i.dir?100-n:n}function M(t){var e=100,n=!1;return rt.forEach(function(r,i){if(!r.hasAttribute("disabled")){var o=Math.abs(ft[i]-t);o<e&&(n=i,e=o)}}),n}function O(t,e,n,r){var i=n.slice(),o=[!t,t],s=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach(function(t,n){var r=j(i,t,i[t]+e,o[n],s[n],!1);!1===r?e=0:(e=r-i[t],i[t]=r)}):o=s=[!0];var a=!1;r.forEach(function(t,r){a=R(t,n[t]+e,o[r],s[r])||a}),a&&r.forEach(function(t){V("update",t),V("slide",t)})}function V(t,e,n){Object.keys(gt).forEach(function(r){var o=r.split(".")[0];t===o&&gt[r].forEach(function(t){t.call(ot,mt.map(i.format.to),e,mt.slice(),n||!1,ft.slice())})})}function F(t,e){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&D(t,e)}function L(t,e){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==e.buttonsProperty)return D(t,e);var n=(i.dir?-1:1)*(t.calcPoint-e.startCalcPoint);O(n>0,100*n/e.baseSize,e.locations,e.handleNumbers)}function D(t,e){dt&&(p(dt,i.cssClasses.active),dt=!1),t.cursor&&(xt.style.cursor="",xt.removeEventListener("selectstart",n)),vt.forEach(function(t){wt.removeEventListener(t[0],t[1])}),p(ct,i.cssClasses.drag),B(),e.handleNumbers.forEach(function(t){V("change",t),V("set",t),V("end",t)})}function z(t,e){if(1===e.handleNumbers.length){var r=rt[e.handleNumbers[0]];if(r.hasAttribute("disabled"))return!1;dt=r.children[0],f(dt,i.cssClasses.active)}t.stopPropagation();var o=A(at.move,wt,L,{startCalcPoint:t.calcPoint,baseSize:U(),pageOffset:t.pageOffset,handleNumbers:e.handleNumbers,buttonsProperty:t.buttons,locations:ft.slice()}),s=A(at.end,wt,D,{handleNumbers:e.handleNumbers}),a=A("mouseout",wt,F,{handleNumbers:e.handleNumbers});vt=o.concat(s,a),t.cursor&&(xt.style.cursor=getComputedStyle(t.target).cursor,rt.length>1&&f(ct,i.cssClasses.drag),xt.addEventListener("selectstart",n,!1)),e.handleNumbers.forEach(function(t){V("start",t)})}function $(t){t.stopPropagation();var e=P(t.calcPoint),n=M(e);if(!1===n)return!1;i.events.snap||a(ct,i.cssClasses.tap,i.animationDuration),R(n,e,!0,!0),B(),V("slide",n,!0),V("update",n,!0),V("change",n,!0),V("set",n,!0),i.events.snap&&z(t,{handleNumbers:[n]})}function H(t){var e=P(t.calcPoint),n=ht.getStep(e),r=ht.fromStepping(n);Object.keys(gt).forEach(function(t){"hover"===t.split(".")[0]&&gt[t].forEach(function(t){t.call(ot,r)})})}function j(t,e,n,r,o,s){return rt.length>1&&(r&&e>0&&(n=Math.max(n,t[e-1]+i.margin)),o&&e<rt.length-1&&(n=Math.min(n,t[e+1]-i.margin))),rt.length>1&&i.limit&&(r&&e>0&&(n=Math.min(n,t[e-1]+i.limit)),o&&e<rt.length-1&&(n=Math.max(n,t[e+1]-i.limit))),i.padding&&(0===e&&(n=Math.max(n,i.padding)),e===rt.length-1&&(n=Math.min(n,100-i.padding))),n=ht.getStep(n),!((n=l(n))===t[e]&&!s)&&n}function q(t){return t+"%"}function T(t,e){ft[t]=e,mt[t]=ht.fromStepping(e);var n=function(){rt[t].style[i.style]=q(e),_(t),_(t+1)};window.requestAnimationFrame&&i.useRequestAnimationFrame?window.requestAnimationFrame(n):n()}function B(){pt.forEach(function(t){var e=ft[t]>50?-1:1,n=3+(rt.length+e*t);rt[t].childNodes[0].style.zIndex=n})}function R(t,e,n,r){return!1!==(e=j(ft,t,e,n,r,!1))&&(T(t,e),!0)}function _(t){if(it[t]){var e=0,n=100;0!==t&&(e=ft[t-1]),t!==it.length-1&&(n=ft[t]),it[t].style[i.style]=q(e),it[t].style[i.styleOposite]=q(100-n)}}function I(t,e){null!==t&&!1!==t&&("number"==typeof t&&(t=String(t)),!1===(t=i.format.from(t))||isNaN(t)||R(e,ht.toStepping(t),!1,!1))}function X(t,e){var n=u(t),r=void 0===ft[0];e=void 0===e||!!e,n.forEach(I),i.animate&&!r&&a(ct,i.cssClasses.tap,i.animationDuration),pt.forEach(function(t){R(t,ft[t],!0,!1)}),B(),pt.forEach(function(t){V("update",t),null!==n[t]&&e&&V("set",t)})}function Y(t){X(i.start,t)}function W(){var t=mt.map(i.format.to);return 1===t.length?t[0]:t}function J(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&p(ct,i.cssClasses[t]);for(;ct.firstChild;)ct.removeChild(ct.firstChild);delete ct.noUiSlider}function K(){return ft.map(function(t,e){var n=ht.getNearbySteps(t),r=mt[e],i=n.thisStep.step,o=null;!1!==i&&r+i>n.stepAfter.startValue&&(i=n.stepAfter.startValue-r),o=r>n.thisStep.startValue?n.thisStep.step:!1!==n.stepBefore.step&&r-n.stepBefore.highestStep,100===t?i=null:0===t&&(o=null);var s=ht.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(s))),null!==o&&!1!==o&&(o=Number(o.toFixed(s))),[o,i]})}function Z(t,e){gt[t]=gt[t]||[],gt[t].push(e),"update"===t.split(".")[0]&&rt.forEach(function(t,e){V("update",e)})}function tt(t){var e=t&&t.split(".")[0],n=e&&t.substring(e.length);Object.keys(gt).forEach(function(t){var r=t.split(".")[0],i=t.substring(r.length);e&&e!==r||n&&n!==i||delete gt[t]})}function et(t,e){var n=W(),r=["margin","limit","padding","range","animate","snap","step","format"];r.forEach(function(e){void 0!==t[e]&&(s[e]=t[e])});var o=G(s);r.forEach(function(e){void 0!==t[e]&&(i[e]=o[e])}),ht=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips&&N(i.pips),ft=[],X(t.start||n,e)}var nt,rt,it,ot,st,at=m(),lt=v(),ut=lt&&g(),ct=t,ft=[],pt=[],dt=!1,ht=i.spectrum,mt=[],gt={},vt=null,bt=t.ownerDocument,wt=bt.documentElement,xt=bt.body;if(ct.noUiSlider)throw new Error("noUiSlider ("+Q+"): Slider was already initialized.");return function(t){f(t,i.cssClasses.target),0===i.dir?f(t,i.cssClasses.ltr):f(t,i.cssClasses.rtl),0===i.ort?f(t,i.cssClasses.horizontal):f(t,i.cssClasses.vertical),nt=c(t,i.cssClasses.base)}(ct),function(t,e){rt=[],it=[],it.push(w(e,t[0]));for(var n=0;n<i.handles;n++)rt.push(b(e,n)),pt[n]=n,it.push(w(e,t[n+1]))}(i.connect,nt),ot={destroy:J,steps:K,on:Z,off:tt,get:W,set:X,reset:Y,__moveHandles:function(t,e,n){O(t,e,ft,n)},options:s,updateOptions:et,target:ct,removePips:C,pips:N},function(t){t.fixed||rt.forEach(function(t,e){A(at.start,t.children[0],z,{handleNumbers:[e]})}),t.tap&&A(at.start,nt,$,{}),t.hover&&A(at.move,nt,H,{hover:!0}),t.drag&&it.forEach(function(e,n){if(!1!==e&&0!==n&&n!==it.length-1){var r=rt[n-1],o=rt[n],s=[e];f(e,i.cssClasses.draggable),t.fixed&&(s.push(r.children[0]),s.push(o.children[0])),s.forEach(function(t){A(at.start,t,z,{handles:[r,o],handleNumbers:[n-1,n]})})}})}(i.events),X(i.start),i.pips&&N(i.pips),i.tooltips&&function(){var t=rt.map(x);Z("update",function(e,n,r){if(t[n]){var o=e[n];!0!==i.tooltips[n]&&(o=i.tooltips[n].to(r[n])),t[n].innerHTML=o}})}(),function(){Z("update",function(t,e,n,r,o){pt.forEach(function(t){var e=rt[t],r=j(ft,t,0,!0,!0,!0),s=j(ft,t,100,!0,!0,!0),a=o[t],l=i.ariaFormat.to(n[t]);e.children[0].setAttribute("aria-valuemin",r.toFixed(1)),e.children[0].setAttribute("aria-valuemax",s.toFixed(1)),e.children[0].setAttribute("aria-valuenow",a.toFixed(1)),e.children[0].setAttribute("aria-valuetext",l)})})}(),ot}function K(t,e){if(!t||!t.nodeName)throw new Error("noUiSlider ("+Q+"): create requires a single element, got: "+t);var n=G(e,t),r=J(t,n,e);return t.noUiSlider=r,r}var Q="10.0.0";k.prototype.getMargin=function(t){var e=this.xNumSteps[0];if(e&&t/e%1!=0)throw new Error("noUiSlider ("+Q+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&w(this.xVal,t)},k.prototype.toStepping=function(t){return t=E(this.xVal,this.xPct,t)},k.prototype.fromStepping=function(t){return C(this.xVal,this.xPct,t)},k.prototype.getStep=function(t){return t=N(this.xPct,this.xSteps,this.snap,t)},k.prototype.getNearbySteps=function(t){var e=y(t,this.xPct);return{stepBefore:{startValue:this.xVal[e-2],step:this.xNumSteps[e-2],highestStep:this.xHighestCompleteStep[e-2]},thisStep:{startValue:this.xVal[e-1],step:this.xNumSteps[e-1],highestStep:this.xHighestCompleteStep[e-1]},stepAfter:{startValue:this.xVal[e-0],step:this.xNumSteps[e-0],highestStep:this.xHighestCompleteStep[e-0]}}},k.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(c);return Math.max.apply(null,t)},k.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var Z={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};return{version:Q,create:K}});var slider=document.getElementById("slider");noUiSlider.create(slider,{start:[18,23],connect:!0,range:{min:18,max:35}});var minAge=18,maxAge=35,mouseDown=!1;$(".noUi-handle-lower").mousedown(function(){mouseDown=!0}).mousemove(function(){mouseDown&&$(".minAge").html(Math.round(parseInt(document.getElementsByClassName("noUi-origin")[0].style.left)*(maxAge-minAge)/100+18))}).mouseup(function(){mouseDown=!1}),$(".noUi-handle-upper").mousedown(function(){mouseDown=!0}).mousemove(function(){mouseDown&&$(".maxAge").html(Math.round(parseInt(document.getElementsByClassName("noUi-origin")[1].style.left)*(maxAge-minAge)/100+18))}).mouseup(function(){mouseDown=!1}),$(".noUi-handle-lower").html("<div class='minAge'>"+minAge+"</div>"),$(".noUi-handle-upper").after("<div class='maxAge'>23</div>");var details=!1;$(".search__form-more").click(function(){details=!details,showOrHide()}),$(".filter-list_item").click(function(t){$(".active").toggleClass("active"),$(t.target).toggleClass("active")}),$(".online").after('<i class="fa fa-circle" aria-hidden="true"></i>'),$(".page").click(function(t){$(".active-page").toggleClass("active-page"),$(t.target).toggleClass("active-page")}),$("#city-picker").keypress(function(t){13==t.which&&(event.preventDefault(),$(".cities").append("<div class='city'>"+t.target.value+"<i class='fa fa-times del-city' aria-hidden='true'></i></div>"),t.target.value="")}),$(".del-city").click(function(t){alert($(t.target).parent(".city")),$(t.target).parent(".city").remove()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
